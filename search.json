[
  {
    "objectID": "blogs.html",
    "href": "blogs.html",
    "title": "Blogs",
    "section": "",
    "text": "Babar Azam\n\n\n\n\n\n\n\n\n\n\nTest Batting Performance of Babar Azam\n\n\nMat\nInns\nNO\nRuns\nHS\nAve\nBF\nSR\nHundreds\nFifties\nFours\nSixes\n\n\n\n\n42\n83\n9\n3,521\n196\n47.58\n6,416\n54.88\n8\n26\n412\n21\n\n\n\n\n\n\n\nNote: Last updated on 2023-04-13 06:25:02 PKT\nMat: Number of Matches played\nInns: Number of Innings played\nNO: Number of NOT OUT\nRuns: Runs scored\nHS: Highest Runs Scored\nAve: Average\nBF: Balls Faced\nSR: Strike Rate\nHundreds: Number of Hundreds Scored\nFifties: Number of Fifties Scored\nFours: Number of Fours hitted\nSixes: Number of Sixes hitted\n\n\n\n\n\n\nTest Batting Performance of Babar Azam over the years\n\n\nYear\nMat\nInns\nNO\nRuns\nHS\nAve\nBF\nSR\nHundreds\nFifties\nFours\nSixes\n\n\n\n\n2016\n5\n10\n1\n291\n90\n32.33\n577\n50.43\n0\n2\n29\n0\n\n\n2017\n6\n12\n1\n184\n72\n16.73\n498\n36.95\n0\n2\n16\n1\n\n\n2018\n7\n14\n3\n616\n127\n56.00\n1,131\n54.47\n1\n6\n69\n6\n\n\n2019\n6\n11\n2\n616\n104\n68.44\n852\n72.30\n3\n3\n84\n2\n\n\n2020\n3\n6\n1\n338\n143\n67.60\n564\n59.93\n1\n2\n41\n1\n\n\n2021\n7\n13\n1\n416\n77\n34.67\n858\n48.48\n0\n4\n57\n2\n\n\n2022\n9\n17\n0\n1,184\n196\n69.65\n2,155\n54.94\n4\n7\n125\n9\n\n\n2023\n1\n2\n0\n51\n27\n25.50\n82\n62.20\n0\n0\n8\n1\n\n\n\n\n\n\n\n\n\n\n\n\nTest Batting Performance of Babar Azam over the years\n\n\n\n\n\n\n\n\n\n\nTest Batting Performance of Babar Azam versus different oppositions\n\n\nOpposition\nMat\nInns\nNO\nRuns\nHS\nAve\nBF\nSR\nHundreds\nFifties\nFours\nSixes\n\n\n\n\nAustralia\n10\n19\n1\n799\n196\n44.39\n1,520\n52.57\n2\n4\n78\n6\n\n\nBangladesh\n2\n4\n1\n242\n143\n80.67\n390\n62.05\n1\n1\n31\n2\n\n\nEngland\n6\n12\n2\n611\n136\n61.10\n996\n61.35\n1\n6\n78\n2\n\n\nIreland\n1\n2\n0\n73\n59\n36.50\n139\n52.52\n0\n1\n11\n0\n\n\nNew Zealand\n7\n13\n2\n635\n161\n57.73\n1,223\n51.92\n2\n3\n66\n4\n\n\nSouth Africa\n5\n10\n0\n343\n77\n34.30\n492\n69.72\n0\n3\n65\n0\n\n\nSri Lanka\n6\n11\n2\n572\n119\n63.56\n1,005\n56.92\n3\n3\n56\n6\n\n\nWest Indies\n6\n12\n1\n419\n75\n38.09\n943\n44.43\n0\n5\n44\n2\n\n\nZimbabwe\n1\n2\n0\n2\n2\n1.00\n9\n22.22\n0\n0\n0\n0\n\n\n\n\n\n\n\n\n\n\n\n\nTest Batting Performance of Babar Azam over the years by each inning\n\n\n\n\n\n\n\n\n\n\nTest Batting Performance of Babar Azam over the years by each inning\n\n\nYear\nInnings\nMat\nInns\nNO\nRuns\nHS\nAve\nBF\nSR\nHundreds\nFifties\nFours\nSixes\n\n\n\n\n2016\n1\n2\n3\n0\n99\n69\n33.00\n169\n58.58\n0\n1\n9\n0\n\n\n2016\n2\n1\n2\n1\n109\n90\n109.00\n237\n45.99\n0\n1\n11\n0\n\n\n2016\n3\n2\n3\n0\n53\n29\n17.67\n110\n48.18\n0\n0\n6\n0\n\n\n2016\n4\n1\n2\n0\n30\n16\n15.00\n61\n49.18\n0\n0\n3\n0\n\n\n2017\n1\n1\n1\n0\n55\n55\n55.00\n124\n44.35\n0\n1\n3\n0\n\n\n2017\n2\n3\n5\n0\n108\n72\n21.60\n311\n34.73\n0\n1\n11\n1\n\n\n2017\n3\n1\n1\n0\n0\n0\n0.00\n10\n0.00\n0\n0\n0\n0\n\n\n2017\n4\n3\n5\n1\n21\n9\n5.25\n53\n39.62\n0\n0\n2\n0\n\n\n2018\n1\n3\n5\n1\n216\n127\n54.00\n380\n56.84\n1\n1\n30\n2\n\n\n2018\n2\n2\n3\n1\n144\n68\n72.00\n254\n56.69\n0\n2\n17\n0\n\n\n2018\n3\n2\n3\n1\n133\n99\n66.50\n248\n53.63\n0\n1\n8\n4\n\n\n2018\n4\n2\n3\n0\n123\n59\n41.00\n249\n49.40\n0\n2\n14\n0\n\n\n2019\n1\n2\n3\n0\n63\n60\n21.00\n105\n60.00\n0\n1\n8\n1\n\n\n2019\n2\n2\n3\n1\n248\n102\n124.00\n315\n78.73\n1\n1\n35\n0\n\n\n2019\n3\n2\n4\n1\n284\n104\n94.67\n403\n70.47\n2\n1\n36\n1\n\n\n2019\n4\n1\n1\n0\n21\n21\n21.00\n29\n72.41\n0\n0\n5\n0\n\n\n2020\n1\n1\n2\n0\n116\n69\n58.00\n233\n49.79\n0\n1\n14\n0\n\n\n2020\n2\n1\n2\n0\n154\n143\n77.00\n219\n70.32\n1\n0\n19\n1\n\n\n2020\n3\n1\n2\n1\n68\n63\n68.00\n112\n60.71\n0\n1\n8\n0\n\n\n2021\n1\n3\n5\n0\n260\n77\n52.00\n499\n52.10\n0\n3\n38\n1\n\n\n2021\n2\n2\n3\n0\n17\n10\n5.67\n77\n22.08\n0\n0\n1\n0\n\n\n2021\n3\n2\n3\n0\n96\n55\n32.00\n218\n44.04\n0\n1\n9\n1\n\n\n2021\n4\n1\n2\n1\n43\n30\n43.00\n64\n67.19\n0\n0\n9\n0\n\n\n2022\n1\n2\n3\n0\n275\n161\n91.67\n485\n56.70\n1\n1\n27\n1\n\n\n2022\n2\n3\n6\n0\n449\n136\n74.83\n751\n59.79\n2\n2\n52\n5\n\n\n2022\n3\n1\n2\n0\n68\n54\n34.00\n125\n54.40\n0\n1\n8\n0\n\n\n2022\n4\n3\n6\n0\n392\n196\n65.33\n794\n49.37\n1\n3\n38\n3\n\n\n2023\n2\n1\n1\n0\n24\n24\n24.00\n41\n58.54\n0\n0\n3\n1\n\n\n2023\n4\n1\n1\n0\n27\n27\n27.00\n41\n65.85\n0\n0\n5\n0\n\n\n\n\n\n\n\n\n\n\n\n\nTest Batting Performance of Babar Azam versus different oppositions"
  },
  {
    "objectID": "blogs.html#overall-performance",
    "href": "blogs.html#overall-performance",
    "title": "Blogs",
    "section": "",
    "text": "Test Batting Performance of Babar Azam\n\n\nMat\nInns\nNO\nRuns\nHS\nAve\nBF\nSR\nHundreds\nFifties\nFours\nSixes\n\n\n\n\n42\n83\n9\n3,521\n196\n47.58\n6,416\n54.88\n8\n26\n412\n21\n\n\n\n\n\n\n\nNote: Last updated on 2023-04-13 06:25:02 PKT\nMat: Number of Matches played\nInns: Number of Innings played\nNO: Number of NOT OUT\nRuns: Runs scored\nHS: Highest Runs Scored\nAve: Average\nBF: Balls Faced\nSR: Strike Rate\nHundreds: Number of Hundreds Scored\nFifties: Number of Fifties Scored\nFours: Number of Fours hitted\nSixes: Number of Sixes hitted"
  },
  {
    "objectID": "blogs.html#performance-by-years",
    "href": "blogs.html#performance-by-years",
    "title": "Blogs",
    "section": "",
    "text": "Test Batting Performance of Babar Azam over the years\n\n\nYear\nMat\nInns\nNO\nRuns\nHS\nAve\nBF\nSR\nHundreds\nFifties\nFours\nSixes\n\n\n\n\n2016\n5\n10\n1\n291\n90\n32.33\n577\n50.43\n0\n2\n29\n0\n\n\n2017\n6\n12\n1\n184\n72\n16.73\n498\n36.95\n0\n2\n16\n1\n\n\n2018\n7\n14\n3\n616\n127\n56.00\n1,131\n54.47\n1\n6\n69\n6\n\n\n2019\n6\n11\n2\n616\n104\n68.44\n852\n72.30\n3\n3\n84\n2\n\n\n2020\n3\n6\n1\n338\n143\n67.60\n564\n59.93\n1\n2\n41\n1\n\n\n2021\n7\n13\n1\n416\n77\n34.67\n858\n48.48\n0\n4\n57\n2\n\n\n2022\n9\n17\n0\n1,184\n196\n69.65\n2,155\n54.94\n4\n7\n125\n9\n\n\n2023\n1\n2\n0\n51\n27\n25.50\n82\n62.20\n0\n0\n8\n1\n\n\n\n\n\n\n\n\n\n\n\n\nTest Batting Performance of Babar Azam over the years"
  },
  {
    "objectID": "blogs.html#performance-versus-different-oppositions",
    "href": "blogs.html#performance-versus-different-oppositions",
    "title": "Blogs",
    "section": "",
    "text": "Test Batting Performance of Babar Azam versus different oppositions\n\n\nOpposition\nMat\nInns\nNO\nRuns\nHS\nAve\nBF\nSR\nHundreds\nFifties\nFours\nSixes\n\n\n\n\nAustralia\n10\n19\n1\n799\n196\n44.39\n1,520\n52.57\n2\n4\n78\n6\n\n\nBangladesh\n2\n4\n1\n242\n143\n80.67\n390\n62.05\n1\n1\n31\n2\n\n\nEngland\n6\n12\n2\n611\n136\n61.10\n996\n61.35\n1\n6\n78\n2\n\n\nIreland\n1\n2\n0\n73\n59\n36.50\n139\n52.52\n0\n1\n11\n0\n\n\nNew Zealand\n7\n13\n2\n635\n161\n57.73\n1,223\n51.92\n2\n3\n66\n4\n\n\nSouth Africa\n5\n10\n0\n343\n77\n34.30\n492\n69.72\n0\n3\n65\n0\n\n\nSri Lanka\n6\n11\n2\n572\n119\n63.56\n1,005\n56.92\n3\n3\n56\n6\n\n\nWest Indies\n6\n12\n1\n419\n75\n38.09\n943\n44.43\n0\n5\n44\n2\n\n\nZimbabwe\n1\n2\n0\n2\n2\n1.00\n9\n22.22\n0\n0\n0\n0\n\n\n\n\n\n\n\n\n\n\n\n\nTest Batting Performance of Babar Azam over the years by each inning"
  },
  {
    "objectID": "blogs.html#performance-by-years-and-innings",
    "href": "blogs.html#performance-by-years-and-innings",
    "title": "Blogs",
    "section": "",
    "text": "Test Batting Performance of Babar Azam over the years by each inning\n\n\nYear\nInnings\nMat\nInns\nNO\nRuns\nHS\nAve\nBF\nSR\nHundreds\nFifties\nFours\nSixes\n\n\n\n\n2016\n1\n2\n3\n0\n99\n69\n33.00\n169\n58.58\n0\n1\n9\n0\n\n\n2016\n2\n1\n2\n1\n109\n90\n109.00\n237\n45.99\n0\n1\n11\n0\n\n\n2016\n3\n2\n3\n0\n53\n29\n17.67\n110\n48.18\n0\n0\n6\n0\n\n\n2016\n4\n1\n2\n0\n30\n16\n15.00\n61\n49.18\n0\n0\n3\n0\n\n\n2017\n1\n1\n1\n0\n55\n55\n55.00\n124\n44.35\n0\n1\n3\n0\n\n\n2017\n2\n3\n5\n0\n108\n72\n21.60\n311\n34.73\n0\n1\n11\n1\n\n\n2017\n3\n1\n1\n0\n0\n0\n0.00\n10\n0.00\n0\n0\n0\n0\n\n\n2017\n4\n3\n5\n1\n21\n9\n5.25\n53\n39.62\n0\n0\n2\n0\n\n\n2018\n1\n3\n5\n1\n216\n127\n54.00\n380\n56.84\n1\n1\n30\n2\n\n\n2018\n2\n2\n3\n1\n144\n68\n72.00\n254\n56.69\n0\n2\n17\n0\n\n\n2018\n3\n2\n3\n1\n133\n99\n66.50\n248\n53.63\n0\n1\n8\n4\n\n\n2018\n4\n2\n3\n0\n123\n59\n41.00\n249\n49.40\n0\n2\n14\n0\n\n\n2019\n1\n2\n3\n0\n63\n60\n21.00\n105\n60.00\n0\n1\n8\n1\n\n\n2019\n2\n2\n3\n1\n248\n102\n124.00\n315\n78.73\n1\n1\n35\n0\n\n\n2019\n3\n2\n4\n1\n284\n104\n94.67\n403\n70.47\n2\n1\n36\n1\n\n\n2019\n4\n1\n1\n0\n21\n21\n21.00\n29\n72.41\n0\n0\n5\n0\n\n\n2020\n1\n1\n2\n0\n116\n69\n58.00\n233\n49.79\n0\n1\n14\n0\n\n\n2020\n2\n1\n2\n0\n154\n143\n77.00\n219\n70.32\n1\n0\n19\n1\n\n\n2020\n3\n1\n2\n1\n68\n63\n68.00\n112\n60.71\n0\n1\n8\n0\n\n\n2021\n1\n3\n5\n0\n260\n77\n52.00\n499\n52.10\n0\n3\n38\n1\n\n\n2021\n2\n2\n3\n0\n17\n10\n5.67\n77\n22.08\n0\n0\n1\n0\n\n\n2021\n3\n2\n3\n0\n96\n55\n32.00\n218\n44.04\n0\n1\n9\n1\n\n\n2021\n4\n1\n2\n1\n43\n30\n43.00\n64\n67.19\n0\n0\n9\n0\n\n\n2022\n1\n2\n3\n0\n275\n161\n91.67\n485\n56.70\n1\n1\n27\n1\n\n\n2022\n2\n3\n6\n0\n449\n136\n74.83\n751\n59.79\n2\n2\n52\n5\n\n\n2022\n3\n1\n2\n0\n68\n54\n34.00\n125\n54.40\n0\n1\n8\n0\n\n\n2022\n4\n3\n6\n0\n392\n196\n65.33\n794\n49.37\n1\n3\n38\n3\n\n\n2023\n2\n1\n1\n0\n24\n24\n24.00\n41\n58.54\n0\n0\n3\n1\n\n\n2023\n4\n1\n1\n0\n27\n27\n27.00\n41\n65.85\n0\n0\n5\n0\n\n\n\n\n\n\n\n\n\n\n\n\nTest Batting Performance of Babar Azam versus different oppositions"
  },
  {
    "objectID": "blogs.html#overall-performance-1",
    "href": "blogs.html#overall-performance-1",
    "title": "Blogs",
    "section": "2.1 Overall Performance",
    "text": "2.1 Overall Performance\n\n\n\nTest Batting Performance of Virat Kohli\n\n\nMat\nInns\nNO\nRuns\nHS\nAve\nBF\nSR\nHundreds\nFifties\nFours\nSixes\n\n\n\n\n92\n183\n11\n8,416\n254\n48.93\n15,211\n55.33\n28\n28\n941\n24\n\n\n\n\n\n\n\nNote: Last updated on 2023-04-13 06:25:07 PKT\nMat: Number of Matches played\nInns: Number of Innings played\nNO: Number of NOT OUT\nRuns: Runs scored\nHS: Highest Runs Scored\nAve: Average\nBF: Balls Faced\nSR: Strike Rate\nHundreds: Number of Hundreds Scored\nFifties: Number of Fifties Scored\nFours: Number of Fours hitted\nSixes: Number of Sixes hitted"
  },
  {
    "objectID": "blogs.html#performance-by-years-1",
    "href": "blogs.html#performance-by-years-1",
    "title": "Blogs",
    "section": "2.2 Performance by Years",
    "text": "2.2 Performance by Years\n\n\n\nTest Batting Performance of Virat Kohli over the years\n\n\nYear\nMat\nInns\nNO\nRuns\nHS\nAve\nBF\nSR\nHundreds\nFifties\nFours\nSixes\n\n\n\n\n2011\n5\n9\n0\n202\n63\n22.44\n473\n42.71\n0\n2\n15\n2\n\n\n2012\n8\n16\n2\n689\n116\n49.21\n1,474\n46.74\n3\n3\n89\n2\n\n\n2013\n6\n12\n1\n616\n119\n56.00\n1,127\n54.66\n2\n3\n73\n2\n\n\n2014\n10\n20\n1\n847\n169\n44.58\n1,399\n60.54\n4\n2\n101\n2\n\n\n2015\n8\n15\n0\n640\n147\n42.67\n1,184\n54.05\n2\n2\n74\n1\n\n\n2016\n9\n18\n2\n1,215\n235\n75.94\n2,011\n60.42\n4\n2\n134\n2\n\n\n2017\n8\n16\n2\n1,059\n243\n75.64\n1,389\n76.24\n5\n1\n97\n6\n\n\n2018\n12\n24\n0\n1,322\n153\n55.08\n2,433\n54.34\n5\n5\n144\n2\n\n\n2019\n6\n11\n2\n612\n254\n68.00\n967\n63.29\n2\n2\n78\n3\n\n\n2020\n3\n6\n0\n116\n74\n19.33\n283\n40.99\n0\n1\n15\n0\n\n\n2021\n10\n19\n0\n536\n72\n28.21\n1,216\n44.08\n0\n4\n60\n1\n\n\n2022\n6\n11\n1\n265\n79\n26.50\n672\n39.43\n0\n1\n33\n1\n\n\n2023\n3\n6\n0\n297\n186\n49.50\n583\n50.94\n1\n0\n28\n0\n\n\n\n\n\n\n\n\n\n\n\n\nTest Batting Performance of Virat Kohli over the years"
  },
  {
    "objectID": "blogs.html#performance-versus-different-oppositions-1",
    "href": "blogs.html#performance-versus-different-oppositions-1",
    "title": "Blogs",
    "section": "2.3 Performance versus different oppositions",
    "text": "2.3 Performance versus different oppositions\n\n\n\nTest Batting Performance of Virat Kohli versus different oppositions\n\n\nOpposition\nMat\nInns\nNO\nRuns\nHS\nAve\nBF\nSR\nHundreds\nFifties\nFours\nSixes\n\n\n\n\nAustralia\n21\n42\n1\n1,979\n186\n48.27\n3,787\n52.26\n8\n5\n218\n5\n\n\nBangladesh\n5\n9\n1\n437\n204\n54.62\n633\n69.04\n2\n0\n49\n1\n\n\nEngland\n25\n50\n3\n1,991\n235\n42.36\n3,824\n52.07\n5\n9\n235\n2\n\n\nNew Zealand\n11\n21\n2\n866\n211\n45.58\n1,606\n53.92\n3\n3\n105\n3\n\n\nSouth Africa\n12\n24\n2\n1,236\n254\n56.18\n2,243\n55.10\n3\n4\n159\n4\n\n\nSri Lanka\n9\n18\n2\n1,085\n243\n67.81\n1,589\n68.28\n5\n2\n99\n6\n\n\nWest Indies\n10\n19\n0\n822\n200\n43.26\n1,529\n53.76\n2\n5\n76\n3\n\n\n\n\n\n\n\n\n\n\n\n\nTest Batting Performance of Virat Kohli over the years by each inning"
  },
  {
    "objectID": "blogs.html#performance-by-years-and-innings-1",
    "href": "blogs.html#performance-by-years-and-innings-1",
    "title": "Blogs",
    "section": "2.4 Performance by Years and Innings",
    "text": "2.4 Performance by Years and Innings\n\n\n\nTest Batting Performance of Virat Kohli over the years by each inning\n\n\nYear\nInnings\nMat\nInns\nNO\nRuns\nHS\nAve\nBF\nSR\nHundreds\nFifties\nFours\nSixes\n\n\n\n\n2011\n1\n1\n2\n0\n4\n4\n2.00\n12\n33.33\n0\n0\n1\n0\n\n\n2011\n2\n2\n3\n0\n93\n52\n31.00\n185\n50.27\n0\n1\n8\n0\n\n\n2011\n3\n1\n2\n0\n42\n27\n21.00\n161\n26.09\n0\n0\n3\n1\n\n\n2011\n4\n1\n2\n0\n63\n63\n31.50\n115\n54.78\n0\n1\n3\n1\n\n\n2012\n1\n3\n6\n0\n169\n58\n28.17\n375\n45.07\n0\n1\n24\n0\n\n\n2012\n2\n2\n3\n0\n322\n116\n107.33\n701\n45.93\n3\n0\n36\n2\n\n\n2012\n3\n2\n4\n0\n111\n75\n27.75\n233\n47.64\n0\n1\n15\n0\n\n\n2012\n4\n2\n3\n2\n87\n51\n87.00\n165\n52.73\n0\n1\n14\n0\n\n\n2013\n1\n1\n2\n0\n165\n119\n82.50\n268\n61.57\n1\n0\n23\n0\n\n\n2013\n2\n3\n6\n1\n269\n107\n53.80\n518\n51.93\n1\n2\n30\n2\n\n\n2013\n3\n1\n2\n0\n107\n96\n53.50\n220\n48.64\n0\n1\n10\n0\n\n\n2013\n4\n1\n2\n0\n75\n41\n37.50\n121\n61.98\n0\n0\n10\n0\n\n\n2014\n1\n3\n5\n0\n51\n25\n10.20\n89\n57.30\n0\n0\n6\n0\n\n\n2014\n2\n3\n5\n0\n365\n169\n73.00\n637\n57.30\n2\n0\n38\n0\n\n\n2014\n3\n3\n5\n0\n36\n20\n7.20\n106\n33.96\n0\n0\n4\n0\n\n\n2014\n4\n3\n5\n1\n395\n141\n98.75\n567\n69.66\n2\n2\n53\n2\n\n\n2015\n1\n3\n6\n0\n177\n78\n29.50\n310\n57.10\n0\n1\n22\n1\n\n\n2015\n2\n1\n2\n0\n250\n147\n125.00\n421\n59.38\n2\n0\n31\n0\n\n\n2015\n3\n3\n5\n0\n164\n88\n32.80\n348\n47.13\n0\n1\n18\n0\n\n\n2015\n4\n1\n2\n0\n49\n46\n24.50\n105\n46.67\n0\n0\n3\n0\n\n\n2016\n1\n3\n6\n0\n599\n211\n99.83\n962\n62.27\n3\n0\n65\n0\n\n\n2016\n2\n3\n5\n0\n396\n235\n79.20\n681\n58.15\n1\n1\n44\n2\n\n\n2016\n3\n3\n5\n0\n165\n81\n33.00\n259\n63.71\n0\n1\n19\n0\n\n\n2016\n4\n1\n2\n2\n55\n49\nInf\n109\n50.46\n0\n0\n6\n0\n\n\n2017\n1\n4\n7\n0\n517\n243\n73.86\n682\n75.81\n2\n0\n56\n0\n\n\n2017\n2\n2\n3\n0\n219\n213\n73.00\n292\n75.00\n1\n0\n17\n2\n\n\n2017\n3\n3\n5\n2\n310\n104\n103.33\n378\n82.01\n2\n1\n23\n4\n\n\n2017\n4\n1\n1\n0\n13\n13\n13.00\n37\n35.14\n0\n0\n1\n0\n\n\n2018\n1\n3\n6\n0\n398\n139\n66.33\n765\n52.03\n1\n3\n41\n0\n\n\n2018\n2\n4\n7\n0\n570\n153\n81.43\n931\n61.22\n3\n0\n67\n2\n\n\n2018\n3\n3\n5\n0\n195\n103\n39.00\n413\n47.22\n1\n0\n21\n0\n\n\n2018\n4\n3\n6\n0\n159\n58\n26.50\n324\n49.07\n0\n2\n15\n0\n\n\n2019\n1\n3\n6\n1\n394\n254\n78.80\n632\n62.34\n1\n1\n55\n2\n\n\n2019\n2\n1\n2\n0\n136\n136\n68.00\n196\n69.39\n1\n0\n18\n0\n\n\n2019\n3\n2\n3\n1\n82\n51\n41.00\n139\n58.99\n0\n1\n5\n1\n\n\n2020\n1\n2\n3\n0\n79\n74\n26.33\n202\n39.11\n0\n1\n8\n0\n\n\n2020\n3\n2\n3\n0\n37\n19\n12.33\n81\n45.68\n0\n0\n7\n0\n\n\n2021\n1\n4\n7\n0\n178\n50\n25.43\n451\n39.47\n0\n1\n17\n0\n\n\n2021\n2\n2\n4\n0\n38\n27\n9.50\n115\n33.04\n0\n0\n3\n0\n\n\n2021\n3\n4\n7\n0\n248\n62\n35.43\n546\n45.42\n0\n2\n31\n1\n\n\n2021\n4\n1\n1\n0\n72\n72\n72.00\n104\n69.23\n0\n1\n9\n0\n\n\n2022\n1\n3\n5\n0\n159\n79\n31.80\n349\n45.56\n0\n1\n21\n1\n\n\n2022\n2\n1\n1\n0\n24\n24\n24.00\n73\n32.88\n0\n0\n3\n0\n\n\n2022\n3\n2\n4\n1\n81\n29\n27.00\n228\n35.53\n0\n0\n9\n0\n\n\n2022\n4\n1\n1\n0\n1\n1\n1.00\n22\n4.55\n0\n0\n0\n0\n\n\n2023\n1\n1\n1\n0\n22\n22\n22.00\n52\n42.31\n0\n0\n2\n0\n\n\n2023\n2\n2\n3\n0\n242\n186\n80.67\n474\n51.05\n1\n0\n21\n0\n\n\n2023\n3\n1\n1\n0\n13\n13\n13.00\n26\n50.00\n0\n0\n2\n0\n\n\n2023\n4\n1\n1\n0\n20\n20\n20.00\n31\n64.52\n0\n0\n3\n0\n\n\n\n\n\n\n\n\n\n\n\n\nTest Batting Performance of Virat Kohli versus different oppositions"
  },
  {
    "objectID": "home.html",
    "href": "home.html",
    "title": "MYaseen208",
    "section": "",
    "text": "MYaseen208"
  },
  {
    "objectID": "PakPC2017.html",
    "href": "PakPC2017.html",
    "title": "Pakistan Population Census 2017",
    "section": "",
    "text": "1 Pakistan Population Census 2017\n#| standalone: true\n#| viewerHeight: 420\nfrom pathlib import Path\nfrom htmltools import css\nfrom shiny import App, reactive, render, ui\nimport pandas as pd\nfrom shinywidgets import output_widget, reactive_read, register_widget\nfrom ipywidgets import Text, HTML\nimport ipywidgets as widgets\nimport json\nimport ipyleaflet as L\nfrom branca.colormap import linear\nimport seaborn as sns\n\n\n\ninfile1 = Path(__file__).parent / \"PakPC2017Merged.csv\"\ndata = pd.read_csv(infile1)\nprovinceOption = data.Province.unique().tolist()\n\n\ninfile2 = Path(__file__).parent / \"data.geojson\"\nwith open(infile2) as f:\n    geojson = json.load(f)\n    \njso2 = pd.json_normalize(geojson, \"features\")\njso3 = dict(zip(jso2[\"properties.NAME_EN\"].tolist(), jso2[\"properties.Pop2017\"].tolist()))\n\nfor feature in geojson['features']:\n    properties = feature['properties']\n    feature.update(id=properties['NAME_EN'])\n    #print(feature['id'])\n\n\n\n\n\napp_ui = ui.page_fluid(\n    ui.panel_title(\"Population Census 2017\"),\n    ui.navset_tab_card(\n####################################################################    \n        ui.nav(\"Data\", ui.output_table(\"table\"),\n        ),\n####################################################################\n        ui.nav(\"Plots\",\n            ui.layout_sidebar(\n                ui.panel_sidebar(\n                ui.input_radio_buttons(\"radio\", \"Plot by \", [\"Province\", \"Division\", \"District\"],selected=\"Province\"),\n                ui.panel_conditional(\n                \"input.radio == 'Province' | input.radio == 'Division' | input.radio == 'District'\", \n                ui.input_selectize(\"province_select\", \"Select input\", provinceOption, multiple = True),\n                ),\n                ui.panel_conditional(\n                \"input.radio == 'Division' | input.radio == 'District'\",\n                ui.input_selectize(\"division_select\", \"Select input\", [], multiple=True),\n                ),\n                ui.panel_conditional(\n                \"input.radio === 'District'\",\n                ui.output_ui(\"district_dist\"),\n                ),\n                \n                #ui.input_selectize(\"province_select\", \"Select input\", provinceOption, multiple = True),\n                #ui.input_selectize(\"di_select\", \"Select input\", [], multiple=True),\n                ),\n                ui.panel_main(\n                ui.output_plot(\"plot\"),\n                ),\n            )\n        ),\n        \n###################################################################        \n        ui.nav(\"Geographic Map\", output_widget(\"map\")\n        ),\n        \n        \n##################################################################\n    )\n)\n\n\n\ndef server(input, output, session):\n    #geo_json = L.GeoJSON(\n    #data=geojson,\n    #hover_style={'fillColor': '#b08a3e' , 'fillOpacity': 0.8},\n    #name = 'NAME_EN'\n    # layer = L.Choropleth(\n    # geo_data=geojson,\n    # choro_data=jso3,\n    # colormap=linear.YlOrRd_04,\n    # border_color='black',\n    # style={'fillOpacity': 0.8, 'dashArray': '5, 5'})\n    # \n    # \n    # map = L.Map(center=(31.41, 73.092), zoom=5\n    # , scroll_wheel_zoom=True)\n    # map.add_layer(layer)\n    # \n    # for name, population, lon, lat in jso2[[\"properties.NAME_EN\", \"properties.Pop2017\", \"properties.lon\", \"properties.lat\"]].values:\n    #     #message = HTML(value=\"%s : %d\"%(name, population))\n    #     marker = L.Marker(location=(lat,lon))\n    #     #popup = L.Popup(location=(lat, lon), child=message, close_button=False, auto_close=False, close_on_escape_key=False)\n    # # map.add_layer(marker)\n    # \n    # \n    # # Add a distance scale\n    # map.add_control(L.leaflet.ScaleControl(position=\"bottomleft\"))\n    # #register_widget(\"map\", map)\n    # \n    # html = widgets.HTML(\"Hover Over Countries\")\n    # #html.layout.margin = '0px 20px 20px 20px'\n    # widget_control1 = L.WidgetControl(widget=html, position='topright')\n    # #map.add_control(widget_control1)\n    # #register_widget(\"map\", map)\n    # \n    # color_picker = widgets.ColorPicker(description='Pick a color:')\n    # widget_control2 = L.WidgetControl(widget=color_picker, position='bottomright')\n    # map.add_control(widget_control2)\n    # register_widget(\"map\", map)\n\n    @output\n    @render.table\n    def table():\n        return (\n                data.style.set_table_attributes(\n                    'class=\"dataframe shiny-table table w-auto\"'\n                )\n                .format(\n                    {\n                        \"Households\": \"{:.0f}\",\n                        \"Male\": \"{:.0f}\",\n                        \"Female\": \"{:.0f}\",\n                        \"Transgender\": \"{:.0f}\",\n                        \"Pop2017\": \"{:.0f}\",\n                        \"Pop1998\": \"{:.0f}\",\n                        \"SexRatio2017\": \"{:.2f}\",\n                        \"GrowthRate\": \"{:.2f}\",\n                    }\n                )\n               )\n    # @reactive.Effect()\n    # def _():\n    #     x = input.province_select()\n    #     data1 = data[data.Province.isin(x)]\n    #     divisionOption = data1.Division.unique().tolist()\n    #     ui.update_select(\n    #         \"division_select\",\n    #         #label=f\"Select input ({len(x)} options)\",\n    #         choices=divisionOption,\n    #         selected=None,\n    #     )\n    # \n    # @output(id=\"district_dist\")\n    # @render.ui\n    # def _():\n    #     y = input.division_select()\n    #     data1 = data[data.Division.isin(y)]\n    #     districtOption = data1.District.unique().tolist()\n    #     return ui.input_selectize(\n    #         \"district_select\", \"Select Districts to Plot\", districtOption, multiple=True\n    #     )\n    #     \n    # \n    # \n    # @output\n    # @render.plot\n    # def plot():\n    #     p = input.radio()\n    #     x = input.province_select()\n    #     y = input.division_select()\n    #     z = input.district_select()\n    #     if p == 'Province':\n    #         data1 = data[data['Province'].isin(x)]\n    #         df = data1.groupby(p, as_index = False).agg({\"Pop2017\":\"sum\"})\n    #     elif p == 'Division':\n    #         data1 = data[data['Division'].isin(y)]\n    #         df = data1.groupby(['Province','Division'], as_index = False).agg({\"Pop2017\":\"sum\"})\n    #     else:\n    #         data1 = data[data['District'].isin(z)]\n    #         df = data1.groupby(['Province','District'], as_index = False).agg({\"Pop2017\":\"sum\"})\n    #         \n    #     g = sns.FacetGrid(df, col=\"Province\",col_wrap=2)\n    #     g.map_dataframe(sns.barplot, x=p, y='Pop2017')\n    #     \n    #     \n    # \n    #     \n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "PythonLM.html",
    "href": "PythonLM.html",
    "title": "Linear Model using Python",
    "section": "",
    "text": "x = 5\nx\n# dir(x)\n\n5\n\n\n\n\n\n\nx + 2      # Sum of two variables\nx - 2      # Subtraction of two variables\nx*2        # Multiplication of two variables\nx**2       # Exponentiation of a variable\nx%2        # Remainder of a variable\nx/float(2) # Division of a variable\n\n2.5\n\n\n\n\n\n\ntype(5)        # Integer\ntype(5.)       # Float\ntype('5')      # Strings\ntype(5 + 3j)   # Complex Number\ntype(True)     # Boolean\n\nbool\n\n\n\n\n\n\n\na1 = True\nprint(a1)\ntype(a1)\n\nb1 = False\nprint(b1)\ntype(b1)\n\nTrue  and True\nTrue  and False\nFalse and True\nFalse and False\n\nTrue or False\nnot True\nnot False\n\nTrue and not False\n\nTrue\nFalse\n\n\nTrue\n\n\n\n\n\n\nx1 = 30\nx1 &gt; 30\nx1 == 30\nx1 &gt;= 30\nx1 &gt; 15\n\nnot x1 == 42\nx1 != 42\n\nTrue\n\n\n\n\n\n\nx2 = 30                # assign 30 to x2\nif x2 &gt; 30:            # predicate: is x2 &gt; 30\n    print(\"Yes\")       # if True, do this\nelse:\n    print(\"No\")        # if False, do this\n\nNo\n\n\n\n\n\n\ndef slength1(s):\n    \"\"\"Returns a string describing the\n    length of the sequences\"\"\"\n    if len(s) &gt; 10:\n        ans = 'very long'\n    else:\n        ans = 'normal'\n    return ans\n\n\nhelp(slength1)\n\nslength1(\"Hello\")\nslength1(\"HelloHello\")\nslength1(\"Hello again\")\nhelp(dir)\ndir(slength1)\n\ndef slength2(s):\n    \"\"\"Returns a string describing the\n    length of the sequences into \n    empty, very long, normal and short\"\"\"\n    if len(s) == 0:\n        ans = 'empty'\n    elif len(s) &gt; 10:\n        ans = 'very long'\n    elif len(s) &gt; 7:\n        ans = 'normal'\n    else:\n        ans = 'short'\n    return ans\n\n\nhelp(slength2)\nslength2(\"\")\nslength2(\"Good Morning\")\nslength2(\"Greetings\")\nslength2(\"Hi\")\n\nHelp on function slength1 in module __main__:\n\nslength1(s)\n    Returns a string describing the\n    length of the sequences\n\nHelp on built-in function dir in module builtins:\n\ndir(...)\n    dir([object]) -&gt; list of strings\n    \n    If called without an argument, return the names in the current scope.\n    Else, return an alphabetized list of names comprising (some of) the attributes\n    of the given object, and of attributes reachable from it.\n    If the object supplies a method named __dir__, it will be used; otherwise\n    the default dir() logic is used and returns:\n      for a module object: the module's attributes.\n      for a class object:  its attributes, and recursively the attributes\n        of its bases.\n      for any other object: its attributes, its class's attributes, and\n        recursively the attributes of its class's base classes.\n\nHelp on function slength2 in module __main__:\n\nslength2(s)\n    Returns a string describing the\n    length of the sequences into \n    empty, very long, normal and short\n\n\n\n'short'\n\n\n\n\n\n\n# help(str)\n# dir(str) \n# help(str.__add__)\n# help(str.capitalize)\n# dir(str.capitalize)"
  },
  {
    "objectID": "PythonLM.html#variables-and-data-types",
    "href": "PythonLM.html#variables-and-data-types",
    "title": "Linear Model using Python",
    "section": "",
    "text": "x = 5\nx\n# dir(x)\n\n5\n\n\n\n\n\n\nx + 2      # Sum of two variables\nx - 2      # Subtraction of two variables\nx*2        # Multiplication of two variables\nx**2       # Exponentiation of a variable\nx%2        # Remainder of a variable\nx/float(2) # Division of a variable\n\n2.5\n\n\n\n\n\n\ntype(5)        # Integer\ntype(5.)       # Float\ntype('5')      # Strings\ntype(5 + 3j)   # Complex Number\ntype(True)     # Boolean\n\nbool"
  },
  {
    "objectID": "PythonLM.html#logical-operators",
    "href": "PythonLM.html#logical-operators",
    "title": "Linear Model using Python",
    "section": "",
    "text": "a1 = True\nprint(a1)\ntype(a1)\n\nb1 = False\nprint(b1)\ntype(b1)\n\nTrue  and True\nTrue  and False\nFalse and True\nFalse and False\n\nTrue or False\nnot True\nnot False\n\nTrue and not False\n\nTrue\nFalse\n\n\nTrue"
  },
  {
    "objectID": "PythonLM.html#comparison",
    "href": "PythonLM.html#comparison",
    "title": "Linear Model using Python",
    "section": "",
    "text": "x1 = 30\nx1 &gt; 30\nx1 == 30\nx1 &gt;= 30\nx1 &gt; 15\n\nnot x1 == 42\nx1 != 42\n\nTrue"
  },
  {
    "objectID": "PythonLM.html#if-else",
    "href": "PythonLM.html#if-else",
    "title": "Linear Model using Python",
    "section": "",
    "text": "x2 = 30                # assign 30 to x2\nif x2 &gt; 30:            # predicate: is x2 &gt; 30\n    print(\"Yes\")       # if True, do this\nelse:\n    print(\"No\")        # if False, do this\n\nNo"
  },
  {
    "objectID": "PythonLM.html#function",
    "href": "PythonLM.html#function",
    "title": "Linear Model using Python",
    "section": "",
    "text": "def slength1(s):\n    \"\"\"Returns a string describing the\n    length of the sequences\"\"\"\n    if len(s) &gt; 10:\n        ans = 'very long'\n    else:\n        ans = 'normal'\n    return ans\n\n\nhelp(slength1)\n\nslength1(\"Hello\")\nslength1(\"HelloHello\")\nslength1(\"Hello again\")\nhelp(dir)\ndir(slength1)\n\ndef slength2(s):\n    \"\"\"Returns a string describing the\n    length of the sequences into \n    empty, very long, normal and short\"\"\"\n    if len(s) == 0:\n        ans = 'empty'\n    elif len(s) &gt; 10:\n        ans = 'very long'\n    elif len(s) &gt; 7:\n        ans = 'normal'\n    else:\n        ans = 'short'\n    return ans\n\n\nhelp(slength2)\nslength2(\"\")\nslength2(\"Good Morning\")\nslength2(\"Greetings\")\nslength2(\"Hi\")\n\nHelp on function slength1 in module __main__:\n\nslength1(s)\n    Returns a string describing the\n    length of the sequences\n\nHelp on built-in function dir in module builtins:\n\ndir(...)\n    dir([object]) -&gt; list of strings\n    \n    If called without an argument, return the names in the current scope.\n    Else, return an alphabetized list of names comprising (some of) the attributes\n    of the given object, and of attributes reachable from it.\n    If the object supplies a method named __dir__, it will be used; otherwise\n    the default dir() logic is used and returns:\n      for a module object: the module's attributes.\n      for a class object:  its attributes, and recursively the attributes\n        of its bases.\n      for any other object: its attributes, its class's attributes, and\n        recursively the attributes of its class's base classes.\n\nHelp on function slength2 in module __main__:\n\nslength2(s)\n    Returns a string describing the\n    length of the sequences into \n    empty, very long, normal and short\n\n\n\n'short'"
  },
  {
    "objectID": "PythonLM.html#help",
    "href": "PythonLM.html#help",
    "title": "Linear Model using Python",
    "section": "",
    "text": "# help(str)\n# dir(str) \n# help(str.__add__)\n# help(str.capitalize)\n# dir(str.capitalize)"
  },
  {
    "objectID": "PythonLM.html#example-1",
    "href": "PythonLM.html#example-1",
    "title": "Linear Model using Python",
    "section": "5.1 Example 1",
    "text": "5.1 Example 1\n\nConsumption = [5, 6, 7, 15, 16, 17]\nGender = [\"Male\", \"Male\",\"Male\", \"Female\", \"Female\", \"Female\"]\n\nimport pandas as pd\ndf4 = pd.DataFrame(\n {\n   \"Consumption\": Consumption\n , \"Gender\": Gender\n }\n )\n\nprint(df4)\n\n   Consumption  Gender\n0            5    Male\n1            6    Male\n2            7    Male\n3           15  Female\n4           16  Female\n5           17  Female\n\n\n\nimport pandas as pd\nfig = plt.figure()\ndf4.boxplot(\n    \"Consumption\"\n  , by = \"Gender\"\n  )\nplt.title(\"Boxplot\")\nplt.xlabel(\"Gender\")\nplt.ylabel(\"Consumption\")\nplt.show()\n\n&lt;Figure size 768x576 with 0 Axes&gt;\n\n\n\n\n\n\nfrom statsmodels.formula.api import ols\nfrom statsmodels.stats.anova import anova_lm\nfm4 = ols(formula = \"Consumption ~ Gender\", data = df4)\nFit4 = fm4.fit()\n\nprint(dir(Fit4))\n\nprint(Fit4.summary())\nprint(Fit4.params)\nprint(Fit4.centered_tss)\nprint(anova_lm(Fit4))\n\n['HC0_se', 'HC1_se', 'HC2_se', 'HC3_se', '_HCCM', '__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_abat_diagonal', '_cache', '_data_attr', '_data_in_cache', '_get_robustcov_results', '_is_nested', '_use_t', '_wexog_singular_values', 'aic', 'bic', 'bse', 'centered_tss', 'compare_f_test', 'compare_lm_test', 'compare_lr_test', 'condition_number', 'conf_int', 'conf_int_el', 'cov_HC0', 'cov_HC1', 'cov_HC2', 'cov_HC3', 'cov_kwds', 'cov_params', 'cov_type', 'df_model', 'df_resid', 'eigenvals', 'el_test', 'ess', 'f_pvalue', 'f_test', 'fittedvalues', 'fvalue', 'get_influence', 'get_prediction', 'get_robustcov_results', 'info_criteria', 'initialize', 'k_constant', 'llf', 'load', 'model', 'mse_model', 'mse_resid', 'mse_total', 'nobs', 'normalized_cov_params', 'outlier_test', 'params', 'predict', 'pvalues', 'remove_data', 'resid', 'resid_pearson', 'rsquared', 'rsquared_adj', 'save', 'scale', 'ssr', 'summary', 'summary2', 't_test', 't_test_pairwise', 'tvalues', 'uncentered_tss', 'use_t', 'wald_test', 'wald_test_terms', 'wresid']\n                            OLS Regression Results                            \n==============================================================================\nDep. Variable:            Consumption   R-squared:                       0.974\nModel:                            OLS   Adj. R-squared:                  0.968\nMethod:                 Least Squares   F-statistic:                     150.0\nDate:                Thu, 13 Apr 2023   Prob (F-statistic):           0.000255\nTime:                        06:25:17   Log-Likelihood:                -7.2972\nNo. Observations:                   6   AIC:                             18.59\nDf Residuals:                       4   BIC:                             18.18\nDf Model:                           1                                         \nCovariance Type:            nonrobust                                         \n==================================================================================\n                     coef    std err          t      P&gt;|t|      [0.025      0.975]\n----------------------------------------------------------------------------------\nIntercept         16.0000      0.577     27.713      0.000      14.397      17.603\nGender[T.Male]   -10.0000      0.816    -12.247      0.000     -12.267      -7.733\n==============================================================================\nOmnibus:                          nan   Durbin-Watson:                   2.000\nProb(Omnibus):                    nan   Jarque-Bera (JB):                0.562\nSkew:                           0.000   Prob(JB):                        0.755\nKurtosis:                       1.500   Cond. No.                         2.62\n==============================================================================\n\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\nIntercept         16.0\nGender[T.Male]   -10.0\ndtype: float64\n154.0\n           df  sum_sq  mean_sq      F    PR(&gt;F)\nGender    1.0   150.0    150.0  150.0  0.000255\nResidual  4.0     4.0      1.0    NaN       NaN"
  },
  {
    "objectID": "PythonLM.html#example-2",
    "href": "PythonLM.html#example-2",
    "title": "Linear Model using Python",
    "section": "5.2 Example 2",
    "text": "5.2 Example 2\n\nConsumption = [5, 7, 15, 17, 17, 19]\nEduGroup = [\"NoEdu\", \"NoEdu\", \"SchoolEdu\", \"SchoolEdu\", \"CollegeEdu\", \"CollegeEdu\"]\n\nimport pandas as pd\ndf5 = pd.DataFrame(\n {\n   \"Consumption\": Consumption\n , \"EduGroup\": EduGroup\n }\n )\n\nprint(df5)\n\n   Consumption    EduGroup\n0            5       NoEdu\n1            7       NoEdu\n2           15   SchoolEdu\n3           17   SchoolEdu\n4           17  CollegeEdu\n5           19  CollegeEdu\n\n\n\nfig = plt.figure()\ndf5.boxplot(\n    \"Consumption\"\n  , by = \"EduGroup\"\n  )\nplt.title(\"Boxplot\")\nplt.xlabel(\"EduGroup\")\nplt.ylabel(\"Consumption\")\nplt.show()\n\n&lt;Figure size 768x576 with 0 Axes&gt;\n\n\n\n\n\n\nfm5 = ols(formula = \"Consumption ~ EduGroup\", data = df5)\nFit5 = fm5.fit()\n\nprint(Fit5.summary())\nprint(Fit5.params)\nprint(Fit5.centered_tss)\nprint(anova_lm(Fit5))\n\n                            OLS Regression Results                            \n==============================================================================\nDep. Variable:            Consumption   R-squared:                       0.965\nModel:                            OLS   Adj. R-squared:                  0.942\nMethod:                 Least Squares   F-statistic:                     41.33\nDate:                Thu, 13 Apr 2023   Prob (F-statistic):            0.00655\nTime:                        06:25:18   Log-Likelihood:                -8.5136\nNo. Observations:                   6   AIC:                             23.03\nDf Residuals:                       3   BIC:                             22.40\nDf Model:                           2                                         \nCovariance Type:            nonrobust                                         \n=========================================================================================\n                            coef    std err          t      P&gt;|t|      [0.025      0.975]\n-----------------------------------------------------------------------------------------\nIntercept                18.0000      1.000     18.000      0.000      14.818      21.182\nEduGroup[T.NoEdu]       -12.0000      1.414     -8.485      0.003     -16.501      -7.499\nEduGroup[T.SchoolEdu]    -2.0000      1.414     -1.414      0.252      -6.501       2.501\n==============================================================================\nOmnibus:                          nan   Durbin-Watson:                   3.333\nProb(Omnibus):                    nan   Jarque-Bera (JB):                1.000\nSkew:                          -0.000   Prob(JB):                        0.607\nKurtosis:                       1.000   Cond. No.                         3.73\n==============================================================================\n\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\nIntercept                18.0\nEduGroup[T.NoEdu]       -12.0\nEduGroup[T.SchoolEdu]    -2.0\ndtype: float64\n171.33333333333334\n           df      sum_sq    mean_sq          F    PR(&gt;F)\nEduGroup  2.0  165.333333  82.666667  41.333333  0.006553\nResidual  3.0    6.000000   2.000000        NaN       NaN"
  },
  {
    "objectID": "PythonLM.html#example-3",
    "href": "PythonLM.html#example-3",
    "title": "Linear Model using Python",
    "section": "5.3 Example 3",
    "text": "5.3 Example 3\n\nConsumption = [51, 52, 53, 54, 56, 57, 55, 56, 58, 59, 62, 63]\nGender  = [\"Male\", \"Male\", \"Male\", \"Male\", \"Male\", \"Male\", \"Female\", \"Female\", \"Female\", \"Female\", \"Female\", \"Female\"]\nIncome = [80, 80, 90, 90, 100, 100, 80, 80, 90, 90, 100, 100]\n\nimport pandas as pd\ndf6 = pd.DataFrame(\n {\n   \"Consumption\": Consumption\n , \"Gender\": Gender\n , \"Income\": Income\n }\n )\n\nprint(df6)\n\n    Consumption  Gender  Income\n0            51    Male      80\n1            52    Male      80\n2            53    Male      90\n3            54    Male      90\n4            56    Male     100\n5            57    Male     100\n6            55  Female      80\n7            56  Female      80\n8            58  Female      90\n9            59  Female      90\n10           62  Female     100\n11           63  Female     100\n\n\n\n5.3.1 Regression with same slopes and different intercepts\n\nfrom statsmodels.formula.api import ols\nfrom statsmodels.stats.anova import anova_lm\nReg6 = ols(formula = \"Consumption ~ Gender + Income\", data = df6)\nFit6 = Reg6.fit()\n\nprint(Fit6.summary())\nprint(Fit6.params)\nprint(Fit6.fittedvalues)\nprint(Fit6.resid)\nprint(Fit6.bse)\nprint(Fit6.centered_tss)\nprint(anova_lm(Fit6))\n\n                            OLS Regression Results                            \n==============================================================================\nDep. Variable:            Consumption   R-squared:                       0.963\nModel:                            OLS   Adj. R-squared:                  0.955\nMethod:                 Least Squares   F-statistic:                     116.7\nDate:                Thu, 13 Apr 2023   Prob (F-statistic):           3.66e-07\nTime:                        06:25:18   Log-Likelihood:                -12.525\nNo. Observations:                  12   AIC:                             31.05\nDf Residuals:                       9   BIC:                             32.51\nDf Model:                           2                                         \nCovariance Type:            nonrobust                                         \n==================================================================================\n                     coef    std err          t      P&gt;|t|      [0.025      0.975]\n----------------------------------------------------------------------------------\nIntercept         31.8333      2.546     12.505      0.000      26.075      37.592\nGender[T.Male]    -5.0000      0.458    -10.914      0.000      -6.036      -3.964\nIncome             0.3000      0.028     10.694      0.000       0.237       0.363\n==============================================================================\nOmnibus:                        0.407   Durbin-Watson:                   2.294\nProb(Omnibus):                  0.816   Jarque-Bera (JB):                0.503\nSkew:                           0.228   Prob(JB):                        0.778\nKurtosis:                       2.107   Cond. No.                     1.00e+03\n==============================================================================\n\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n[2] The condition number is large,  1e+03. This might indicate that there are\nstrong multicollinearity or other numerical problems.\nIntercept         31.833333\nGender[T.Male]    -5.000000\nIncome             0.300000\ndtype: float64\n0     50.833333\n1     50.833333\n2     53.833333\n3     53.833333\n4     56.833333\n5     56.833333\n6     55.833333\n7     55.833333\n8     58.833333\n9     58.833333\n10    61.833333\n11    61.833333\ndtype: float64\n0     0.166667\n1     1.166667\n2    -0.833333\n3     0.166667\n4    -0.833333\n5     0.166667\n6    -0.833333\n7     0.166667\n8    -0.833333\n9     0.166667\n10    0.166667\n11    1.166667\ndtype: float64\nIntercept         2.545572\nGender[T.Male]    0.458123\nIncome            0.028054\ndtype: float64\n152.66666666666669\n           df     sum_sq   mean_sq           F    PR(&gt;F)\nGender    1.0  75.000000  75.00000  119.117647  0.000002\nIncome    1.0  72.000000  72.00000  114.352941  0.000002\nResidual  9.0   5.666667   0.62963         NaN       NaN\n\n\n\nimport matplotlib.pyplot as plt\nfrom statsmodels.graphics.factorplots import interaction_plot\nfig = plt.figure()\nfig = interaction_plot(\n    x        = Income\n  , trace    = Gender\n  , response = Fit6.fittedvalues\n  , colors   = ['red','blue']\n  , markers  = ['D','^']\n  , xlabel   ='Income'\n  , ylabel   = 'Consumption'\n  )\nplt.show()\n\n&lt;Figure size 768x576 with 0 Axes&gt;\n\n\n\n\n\n\n\n5.3.2 Regression with different slopes and different intercepts\n\nfrom statsmodels.formula.api import ols\nfrom statsmodels.stats.anova import anova_lm\nReg7 = ols(formula = \"Consumption ~ Gender*Income\", data = df6)\nFit7 = Reg7.fit()\n\nprint(Fit7.summary())\nprint(Fit7.params)\nprint(Fit7.fittedvalues)\nprint(Fit7.resid)\nprint(Fit7.bse)\nprint(Fit7.centered_tss)\nprint(anova_lm(Fit7))\n\n                            OLS Regression Results                            \n==============================================================================\nDep. Variable:            Consumption   R-squared:                       0.976\nModel:                            OLS   Adj. R-squared:                  0.967\nMethod:                 Least Squares   F-statistic:                     108.4\nDate:                Thu, 13 Apr 2023   Prob (F-statistic):           8.11e-07\nTime:                        06:25:18   Log-Likelihood:                -9.9135\nNo. Observations:                  12   AIC:                             27.83\nDf Residuals:                       8   BIC:                             29.77\nDf Model:                           3                                         \nCovariance Type:            nonrobust                                         \n=========================================================================================\n                            coef    std err          t      P&gt;|t|      [0.025      0.975]\n-----------------------------------------------------------------------------------------\nIntercept                27.3333      3.059      8.935      0.000      20.279      34.387\nGender[T.Male]            4.0000      4.326      0.925      0.382      -5.976      13.976\nIncome                    0.3500      0.034     10.340      0.000       0.272       0.428\nGender[T.Male]:Income    -0.1000      0.048     -2.089      0.070      -0.210       0.010\n==============================================================================\nOmnibus:                        2.522   Durbin-Watson:                   3.273\nProb(Omnibus):                  0.283   Jarque-Bera (JB):                0.970\nSkew:                          -0.055   Prob(JB):                        0.616\nKurtosis:                       1.612   Cond. No.                     2.62e+03\n==============================================================================\n\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n[2] The condition number is large, 2.62e+03. This might indicate that there are\nstrong multicollinearity or other numerical problems.\nIntercept                27.333333\nGender[T.Male]            4.000000\nIncome                    0.350000\nGender[T.Male]:Income    -0.100000\ndtype: float64\n0     51.333333\n1     51.333333\n2     53.833333\n3     53.833333\n4     56.333333\n5     56.333333\n6     55.333333\n7     55.333333\n8     58.833333\n9     58.833333\n10    62.333333\n11    62.333333\ndtype: float64\n0    -0.333333\n1     0.666667\n2    -0.833333\n3     0.166667\n4    -0.333333\n5     0.666667\n6    -0.333333\n7     0.666667\n8    -0.833333\n9     0.166667\n10   -0.333333\n11    0.666667\ndtype: float64\nIntercept                3.059026\nGender[T.Male]           4.326116\nIncome                   0.033850\nGender[T.Male]:Income    0.047871\ndtype: float64\n152.66666666666669\n                df     sum_sq    mean_sq           F    PR(&gt;F)\nGender         1.0  75.000000  75.000000  163.636364  0.000001\nIncome         1.0  72.000000  72.000000  157.090909  0.000002\nGender:Income  1.0   2.000000   2.000000    4.363636  0.070134\nResidual       8.0   3.666667   0.458333         NaN       NaN\n\n\n\nimport matplotlib.pyplot as plt\nfrom statsmodels.graphics.factorplots import interaction_plot\nfig = plt.figure()\nfig = interaction_plot(\n    x        = Income\n  , trace    = Gender\n  , response = Fit7.fittedvalues\n  , colors   = ['red','blue']\n  , markers  = ['D','^']\n  , xlabel   ='Income'\n  , ylabel   = 'Consumption'\n  )\nplt.show()\n\n&lt;Figure size 768x576 with 0 Axes&gt;"
  },
  {
    "objectID": "Shinylive.html",
    "href": "Shinylive.html",
    "title": "Shinylive in Quarto example",
    "section": "",
    "text": "To display a running Shiny app, use a code block with {shinylive-python}.\n#| standalone: true\n#| viewerHeight: 420\nfrom shiny import App, render, ui\nimport numpy as np\nimport matplotlib.pyplot as plt\napp_ui = ui.page_fluid(\n    ui.layout_sidebar(\n        ui.panel_sidebar(\n            ui.input_slider(\"period\", \"Period\", 0.5, 4, 1, step=0.5),\n            ui.input_slider(\"amplitude\", \"Amplitude\", 0, 2, 1, step=0.25),\n            ui.input_slider(\"shift\", \"Phase shift\", 0, 2, 0, step=0.1),\n        ),\n        ui.panel_main(\n            ui.output_plot(\"plot\"),\n        ),\n    ),\n)\ndef server(input, output, session):\n    @output\n    @render.plot(alt=\"Sine wave\")\n    def plot():\n        t = np.arange(0.0, 4.0, 0.01)\n        s = input.amplitude() * np.sin(\n            2 * np.pi / input.period() * (t - input.shift() / 2)\n        )\n        fig, ax = plt.subplots()\n        ax.set_ylim([-2, 2])\n        ax.plot(t, s)\n        ax.grid()\napp = App(app_ui, server)\nNote that the code block currently must have #| standalone: true, which indicates that the code represents a complete Shiny application, as opposed to one which has parts spread throughout the document (which will be supported in the future).\nThe example above also uses #| viewerHeight: 420 to set the height of the viewer to 420 pixels."
  },
  {
    "objectID": "Shinylive.html#vertically-stacked-components",
    "href": "Shinylive.html#vertically-stacked-components",
    "title": "Shinylive in Quarto example",
    "section": "2.1 Vertically stacked components",
    "text": "2.1 Vertically stacked components\nTo display the editor above the code, use #| layout: vertical.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 300\nfrom shiny import App, render, ui\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"N\", 0, 100, 40),\n    ui.output_text_verbatim(\"txt\"),\n)\ndef server(input, output, session):\n    @output\n    @render.text\n    def txt():\n        return f\"The value of n*2 is {input.n() * 2}\"\napp = App(app_ui, server)"
  },
  {
    "objectID": "Shinylive.html#multiple-files",
    "href": "Shinylive.html#multiple-files",
    "title": "Shinylive in Quarto example",
    "section": "2.2 Multiple files",
    "text": "2.2 Multiple files\nFor apps that have multiple files, you can mark the start of each file with ## file: filename.py.\nBinary files can be used with ## type: binary, and the file must be base64-encoded. This can be done with the base64 command line tool.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n## file: app.py\nfrom pathlib import Path\nfrom shiny import App, render, ui, Inputs, Outputs, Session\nfrom utils import square\napp_ui = ui.page_fluid(\n    ui.row(\n        ui.column(6,\n            ui.input_slider(\"n\", \"Make a Shiny square:\", min=0, max=6, value=2)\n        ),\n        ui.column(6,\n            ui.output_ui(\"images\"),\n        )\n    )\n)\ndef server(input: Inputs, output: Outputs, session: Session):\n    @output\n    @render.ui\n    def images():\n        img = ui.img(src=\"logo.png\", style=\"width: 40px;\")\n        return square(img, input.n())\nwww_dir = Path(__file__).parent / \"www\"\napp = App(app_ui, server, static_assets=www_dir)\n## file: utils.py\nfrom shiny import ui\ndef square(x, n):\n    row = ui.div([x] * n)\n    return ui.div([row] * n)\n## file: www/logo.png\n## type: binary\n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"
  }
]